---
title: "Untitled"
format: html
editor: visual
---

## Packages

```{r}
library(tidyverse)
library(haven)
library(readxl)
```

# Loading databases

```{r}

# Main database
# data <- read_dta("ZA7575.dta")
data <- read_dta("Data/ZA7575.dta")

# LGBTphobia database
ilga <- read_xlsx("ilga.xlsx", sheet = 2)
ilga <- ilga |> 
  filter(CONTINENT == "EUROPE")

# GINI index database
gini <- read_csv("eu_gini_coef.csv")

```

### Merging together Countries database

```{r}

names <- data.frame(
  COUNTRY = c(
    "Belgium", "Greece", "Lithuania", "Portugal", "Bulgaria", "Spain", "Luxembourg", "Romania", "Czechia", "France", 
    "Hungary", "Slovenia", "Denmark", "Croatia", "Malta", "Slovakia", "Germany", "Italy", "Netherlands", "Finland", "Estonia", "Cyprus", "Austria", "Sweden", "Ireland", "Latvia", "Poland",  "Iceland", "Norway", "Liechtenstein", "Switzerland",
  "Bosnia and Herzegovina", "Montenegro", "Moldova", "North Macedonia", "Georgia", "Albania", "Serbia", "TÃ¼rkiye", 
    "Ukraine","Kosovo"
  ),
  geo = c(
    "BE", "EL", "LT", "PT", "BG", "ES", "LU", "RO", "CZ", "FR", "HU", "SI", "DK", "HR", "MT", "SK", "DE", "IT", "NL", "FI", "EE", "CY", "AT", "SE", "IE", "LV", "PL", "IS", "NO", "LI", "CH", "BA", "ME", "MD", "MK", "GE", "AL", "RS", "TR", "UA","XK"
  )
)

gini <- gini |> 
  select(geo, TIME_PERIOD, OBS_VALUE, OBS_FLAG) |> 
    filter(TIME_PERIOD == "2019") |> 
  left_join(names, by = "geo")


countries <- gini |> 
  left_join(ilga, by = "COUNTRY") |> 
  select(-TIME_PERIOD, CONTINENT) |> 
  filter(!is.na(CONTINENT))
```

## Selecting variables in the main dataset

```{r}

selected_data <- data |> 
  select(
    uniqid, 
    isocntry, # nationality keep 
    d11, # age  
    d70, # life satisfaction -recode below DK == NA
    polintr, # political interest -recode below DK == NA
    qa1, # globalization scale 1-4, convert 5 to NA 
    # qa5a,
    # qa7,
    # qa8,
    # qa9,
    # qa11,
    # qa12,
    # qa13,
    # qa14,
    # qa17,
    sd1_7, # do you know someone who is transgender. 
    # sd2_1, sd2_2, sd2_3, sd2_4, sd2_5, sd2_6, sd2_7, sd2_8,
    sd3,
    qc1_4, 
    qc2_1:qc2_14, # recode to 1 for discrimination == yes
      qc2_15, # recode to 0. discriminatino == no
      qc2_16, # recode to NA, impute missing data.  DONT KNOW
    # qc3,
    # qc4,
    qc6_1:qc6_11, # calculate average in new variable. not including values of 11 or 12
    qc7,
    qc8,
    qc9_1:qc9_11,
    qc10,
    qc11_1:qc1_10,
    qc12_1r, qc12_2r, qc12_3r, qc12_4r, qc12_5r, qc12_6r, qc12_7r, qc12_8r, qc12_9r, qc12_10r, qc12_11r, qc12_12r, qc12_13r, qc12_14r, qc12_15r,
    qc13_1r, qc13_2r, qc13_3r, qc13_4r, qc13_5r, qc13_6r, qc13_7r, qc13_8r, qc13_9r, qc13_10r, qc13_11r, qc13_12r, qc13_13r, qc13_14r, qc13_15r,
    qc15_1:qc15_3,
    qc17_1:qc17_7,
    qc18_1r, qc18_2r, qc18_3r,
    qc19, # TARGET VARIABLE 
    qc20,
    d1, # keep, scale from 0-10, remove 11, 12
    # d7,
    d10, # gender keep 
    d8, # keep education years 
    d15a, # convert to factor. occupation 
    d25, # keep type of city 
    # d40a, d40b, d40c, d43a, d43b,
    d60, # financial keep 
    d62_1,  # keep internet at home. calculate average 
    d63, # class keep. as factor 
    d72_1, d72_2, # keep. does my voice count
    p3r, # paradata
    p5, # paradata
    p4 # paradata
) 
```

### Feature engineering

```{r}

selected_data <- selected_data |> 
  rename(COUNTRY = isocntry) |> 
  left_join(names, by = "COUNTRY")

```

## Select variables

```{r}
recoded_data <- selected_data |> 
  mutate(
    
    qc19 = factor(
      case_when(
        qc19 == 2 ~ 0, # make No as zero 
        qc19 == 3 ~ NA, # make DK as NA
        qc19 == 1 ~ 1 # keep Yes as 1        
        ),
      # label the values 
      labels = c("No", "Yes")
      ), 
    
    qa1 = replace(qa1, qa1==5, NA),
    qc2_sum = qc2_1 + qc2_2 + qc2_3 + qc2_4 +
              qc2_5 + qc2_6 + qc2_7 + qc2_8 +
              qc2_9 + qc2_10 + qc2_11 + qc2_12 +
              qc2_13 + qc2_14,
    qc2_recode = case_when(
      qc2_sum > 0 ~ 1,
      qc2_15 == 1 ~ 0,
      qc2_16 == 1 ~ NA),
    # qc6_recode  = mean(qc6_1, qc6_2),
    d15a = factor(d15a, ordered = FALSE ),
    d1 = replace(d1, d1 %in% c(11,12), NA),
    d63 = replace(d63, d63 > 5 , NA),
    d70 = factor(replace(d70, d70 == 5, NA), ordered = F,
          labels = c("Very", "Somewhat", "Not very", "Not at all")), 
    polintr = factor(replace(polintr, polintr == 4, NA), ordered = F,
          labels = c("frequently", "occasionally", "never")), 
    d72_1 = replace(d72_1, d72_1 > 4, NA ),
    d72_2 = replace(d72_2, d72_2 > 4, NA ),
    ) |> 
  select(
    -c(qc2_1:qc2_16)
  )

summary(recoded_data$d70)

```

## Preliminary models

### Split training/testing data 

```{r split=TRUE}
# not sure if we need to split the data for surveys but anyway i will put it here just in case 


```

```{r models}

model1 <- glm(qc19 ~ d11 + d70*polintr,
             data = recoded_data, family = binomial)
model2 <- glm(qc19 ~ d11 + d70 + polintr, 
             data = recoded_data, family = binomial)
model3 <- glm(qc19 ~ COUNTRY,
              data = recoded_data, family = binomial)

stargazer::stargazer(model1, model2, model3, type = "text")
exp(model3$coefficients)
```

```{r}
summary(model1) 
new.data <- data.frame(d11 = c(20, 30, 40),
                       d70 = c("Very", "Very", "Very"),
                       polintr = c("frequently", "frequently", "frequently"))
predict.glm(model1, newdata = new.data, type = "response")
```
